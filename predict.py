""" This module generates notes for a midi file using the
    trained neural network """
import pickle
import numpy as np
import datetime
from music21 import instrument, note, stream, chord
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import Activation

def generate():
    """ Generate a piano midi file """
    #load the notes used to train the model
    with open('data/training_data_bach', 'rb') as filepath:
        training_data = pickle.load(filepath)

    notes = training_data['data']
    mb = training_data['binarizer']

    network_input = prepare_sequences(notes)
    model = create_network(network_input)
    prediction_output = generate_notes(model, network_input, mb)
    print(prediction_output[:10])
    create_midi(prediction_output)

def prepare_sequences(notes):
    """ Prepare the sequences used by the Neural Network """
    sequence_length = 32
    network_input = []
    network_output = []

    for i in range(0, notes.shape[0] - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append(sequence_in)

    network_input = np.array(network_input)

    return network_input

def create_network(network_input):
    """ create the structure of the neural network """
    model = Sequential()
    model.add(LSTM(
        512,
        input_shape=(network_input.shape[1], network_input.shape[2]),
        return_sequences=True
    ))
    model.add(Dropout(0.2))
    model.add(LSTM(512, return_sequences=True))
    model.add(Dropout(0.2))
    model.add(LSTM(512))
    model.add(Dense(256))
    model.add(Dropout(0.2))
    model.add(Dense(network_input.shape[2]))
    model.add(Activation('softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')

    # Load the weights to each node
    model.load_weights('weights-improvement-30-1.5473-bigger.hdf5')

    return model

def get_top_p(preds):
    selected_i = []
    descend_sorted_index = np.argsort(preds)[::-1]
    preds_descend_sorted = sorted(preds, reverse=True)
    for i, pred in enumerate(preds_descend_sorted):
        if i==0:
            selected_i.append(descend_sorted_index[i])
        else:
            if preds_descend_sorted[i]/preds_descend_sorted[0] > 0.3:

                selected_i.append(descend_sorted_index[i])
            else:
                return selected_i

def generate_notes(model, network_input, mb):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    prediction_input = network_input[np.random.choice(network_input.shape[0], 1)]
    prediction_output = []

    # generate 500 notes
    prediction_output = []
    for note_index in range(500):

        pred_prob = model.predict(prediction_input, verbose=0)
        pred_index = get_top_p(pred_prob[0])
        prediction = mb.classes_[pred_index]

        prediction_output.append(prediction)
        prediction_input = prediction_input[0][:-1]
        prediction_input = np.vstack([prediction_input, pred_prob])
        
        prediction_input = np.expand_dims(prediction_input, axis=0)

    prediction_output = np.array(prediction_output).tolist()
    print(prediction_output[:20])

    return prediction_output

def create_midi(prediction_output):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        note = chord.Chord(pattern)
        note.offset = offset
        output_notes.append(note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    filename = 'out_{}.mid'.format(datetime.datetime.today().strftime('%Y-%m-%d-%H-%M-%S'))
    midi_stream.write('midi', fp=filename)

if __name__ == '__main__':
    generate()
